services:
  mlflow-web:
    build:
      context: .
      dockerfile: dockerfile.mlflow
    ports:
      - "${MLFLOW_PORT:-5001}:5000"
    environment:
      MLFLOW_S3_ENDPOINT_URL: "http://minio:9000"
      MLFLOW_S3_IGNORE_TLS: "true"
      AWS_ACCESS_KEY_ID: "mflow"
      AWS_SECRET_ACCESS_KEY: "mflow123"
    entrypoint: mlflow server --backend-store-uri postgresql+psycopg2://mlflow:mlflow123@postgres/mlflow --default-artifact-root s3://mlflow/ --artifacts-destination s3://mlflow/ -h 0.0.0.0
    depends_on:
      - minio
      - postgres
    networks:
      - mlflow-network

  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-8900}:8900"
    environment:
      MINIO_ACCESS_KEY: "mlflow"
      MINIO_SECRET_KEY: "mlflow123"
    volumes:
      - "mlflow-minio:/data/minio"
    command: 'minio server /data/minio --console-address ":8900"'
    networks:
      - mlflow-network

  etl:
    build:
      context: ./etl
      dockerfile: dockerfile.etl
    networks:
      - mlflow-network
    ports:
      - "8000:8080"
  
  predict:
    build:
      context: ./predict
      dockerfile: dockerfile.predict
    networks:
      - mlflow-network
    depends_on:
      - etl
      - mlflow-web
    ports:
      - "8001:8081"

  postgres:
    image: postgres:16-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: "mlflow"
      POSTGRES_PASSWORD: "mlflow123"
      POSTGRES_DB: "mlflow"
    volumes:
      - "mlflow-postgres:/var/lib/postgresql/data"
    networks:
      - mlflow-network

networks:
  mlflow-network:
    name: mlflow-network
    driver: bridge

volumes:
  mlflow-minio:
    driver: local
  mlflow-postgres:
    driver: local
